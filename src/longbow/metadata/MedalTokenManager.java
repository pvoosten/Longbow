/* Generated By:JavaCC: Do not edit this line. MedalTokenManager.java */
/*
 * Copyright 2008 Philip van Oosten (Mentoring Systems BVBA)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 */

package longbow.metadata;


@SuppressWarnings("all")
public class MedalTokenManager implements MedalConstants {

	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, "\50", "\51", null, null, null, null, null, null, null, null, null, null, null, };

	public static final String[] lexStateNames = { "DEFAULT", };

	static final int[] jjnextStates = { 1, 3, 11, 15, 36, 43, 38, 40, 47, 51, 49, 50, 65, 69, 77, 80, 89, 91, 93, 21, 96, 99, 104, 106, 112, 116, 121, 124, 102, 110, 119, 128, 88, 48, 92, 75, 86, 58,
	        62, 45, 53, 28, 32, };

	static final long[] jjtoToken = { 0xfff81L, };

	static final long[] jjtoSkip = { 0x1eL, };

	public java.io.PrintStream debugStream = System.out;

	protected SimpleCharStream input_stream;

	protected char curChar;

	int curLexState = 0;

	int defaultLexState = 0;

	int jjnewStateCnt;

	int jjround;

	int jjmatchedPos;

	int jjmatchedKind;

	private final int[] jjrounds = new int[129];

	private final int[] jjstateSet = new int[258];

	public MedalTokenManager(final SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag) {
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		}
		input_stream = stream;
	}

	public MedalTokenManager(final SimpleCharStream stream, final int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public Token getNextToken() {
		final int kind;
		final Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (final java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & 1L << curChar) != 0L) {
					curChar = input_stream.BeginToken();
				}
			} catch (final java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos) {
					input_stream.backup(curPos - jjmatchedPos - 1);
				}
				if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (final java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}

	public void ReInit(final SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	public void ReInit(final SimpleCharStream stream, final int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void setDebugStream(final java.io.PrintStream ds) {
		debugStream = ds;
	}

	public void SwitchTo(final int lexState) {
		if (lexState >= 1 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}

	protected Token jjFillToken() {
		final Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		final String im = jjstrLiteralImages[jjmatchedKind];
		t.image = im == null ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	private final void jjAddStates(int start, final int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAdd(final int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjCheckNAddStates(final int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	private final void jjCheckNAddStates(int start, final int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(final int state1, final int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final int jjMoveNfa_0(final int startState, int curPos) {
		final int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 129;
		int i = 1;
		jjstateSet[0] = startState;
		final int j;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				final long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 28:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						} else if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 130:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						} else if ((0x100002600L & l) != 0L) {
							jjCheckNAddTwoStates(23, 27);
						} else if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 9:
					case 18:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 19) {
							kind = 19;
						}
						jjCheckNAddTwoStates(18, 19);
						break;
					case 102:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						} else if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 22:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						} else if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 129:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						} else if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 1:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(0, 1);
						}
						break;
					case 11:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(2, 3);
						}
						break;
					case 19:
						if (curChar == 46) {
							jjCheckNAdd(20);
						}
						break;
					case 20:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 19) {
							kind = 19;
						}
						jjCheckNAddTwoStates(19, 20);
						break;
					case 23:
						if ((0x100002600L & l) != 0L) {
							jjCheckNAddTwoStates(23, 27);
						}
						break;
					case 35:
						if ((0x100002600L & l) != 0L) {
							jjCheckNAddStates(4, 7);
						}
						break;
					case 36:
						if ((0x100002600L & l) != 0L) {
							jjCheckNAddTwoStates(36, 43);
						}
						break;
					case 38:
						if ((0x100002600L & l) != 0L) {
							jjCheckNAddTwoStates(38, 40);
						}
						break;
					case 47:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(8, 9);
						}
						break;
					case 49:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(10, 11);
						}
						break;
					case 65:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(12, 13);
						}
						break;
					case 77:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(14, 15);
						}
						break;
					case 89:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(16, 17);
						}
						break;
					case 93:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(18, 19);
						}
						break;
					case 96:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(20, 21);
						}
						break;
					case 104:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(22, 23);
						}
						break;
					case 112:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(24, 25);
						}
						break;
					case 121:
						if ((0x100002600L & l) != 0L) {
							jjAddStates(26, 27);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				final long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 28:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						}
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 31;
						} else if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 22;
						}
						break;
					case 130:
					case 18:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 19) {
							kind = 19;
						}
						jjCheckNAddTwoStates(18, 19);
						break;
					case 9:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						}
						if ((0x200000002L & l) != 0L) {
							jjAddStates(28, 31);
						} else if ((0x20000000200L & l) != 0L) {
							jjCheckNAddStates(32, 34);
						} else if ((0x1000000010L & l) != 0L) {
							jjAddStates(35, 36);
						} else if ((0x800000008L & l) != 0L) {
							jjAddStates(37, 38);
						} else if ((0x10000000100000L & l) != 0L) {
							jjAddStates(39, 40);
						} else if ((0x400000004000L & l) != 0L) {
							jjAddStates(41, 42);
						} else if ((0x10000000100L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 16;
						} else if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 8;
						}
						break;
					case 102:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						}
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 127;
						} else if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 118;
						}
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 109;
						} else if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 101;
						}
						break;
					case 22:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 19) {
								kind = 19;
							}
							jjCheckNAddTwoStates(18, 19);
						}
						if ((0x10000000100000L & l) != 0L) {
							jjCheckNAdd(23);
						}
						break;
					case 129:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 19) {
							kind = 19;
						}
						jjCheckNAddTwoStates(18, 19);
						break;
					case 0:
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 1;
						}
						break;
					case 2:
						if ((0x4000000040L & l) != 0L && kind > 17) {
							kind = 17;
						}
						break;
					case 3:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 2;
						}
						break;
					case 4:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 0;
						}
						break;
					case 5:
						if ((0x200000002000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 4;
						}
						break;
					case 6:
						if ((0x10000000100000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 5;
						}
						break;
					case 7:
						if ((0x400000004L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 6;
						}
						break;
					case 8:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 7;
						}
						break;
					case 10:
						if ((0x8000000080000L & l) != 0L) {
							jjCheckNAdd(11);
						}
						break;
					case 12:
						if ((0x2000000020L & l) != 0L && kind > 17) {
							kind = 17;
						}
						break;
					case 13:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 12;
						}
						break;
					case 14:
						if ((0x200000002000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 13;
						}
						break;
					case 15:
						if ((0x10000000100000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 14;
						}
						break;
					case 16:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 10;
						}
						break;
					case 17:
						if ((0x10000000100L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 16;
						}
						break;
					case 20:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 19) {
							kind = 19;
						}
						jjCheckNAddTwoStates(19, 20);
						break;
					case 21:
						if ((0x400000004000L & l) != 0L) {
							jjAddStates(41, 42);
						}
						break;
					case 24:
						if ((0x100000001000L & l) != 0L && kind > 18) {
							kind = 18;
						}
						break;
					case 25:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 24;
						}
						break;
					case 26:
						if ((0x20000000200000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 25;
						}
						break;
					case 27:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 26;
						}
						break;
					case 29:
						if ((0x4000000040000L & l) != 0L) {
							jjCheckNAdd(23);
						}
						break;
					case 30:
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 31:
						if ((0x40000000400000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 30;
						}
						break;
					case 32:
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 31;
						}
						break;
					case 33:
						if ((0x10000000100000L & l) != 0L) {
							jjAddStates(39, 40);
						}
						break;
					case 34:
						if ((0x2000000020L & l) == 0L) {
							break;
						}
						if (kind > 17) {
							kind = 17;
						}
						jjCheckNAdd(35);
						break;
					case 37:
						if ((0x2000000020L & l) == 0L) {
							break;
						}
						if (kind > 17) {
							kind = 17;
						}
						jjstateSet[jjnewStateCnt++] = 38;
						break;
					case 39:
						if ((0x8000000080000L & l) != 0L && kind > 17) {
							kind = 17;
						}
						break;
					case 40:
						if ((0x20000000200L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 39;
						}
						break;
					case 41:
						if ((0x200000002000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 37;
						}
						break;
					case 42:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 41;
						}
						break;
					case 43:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 42;
						}
						break;
					case 44:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 34;
						}
						break;
					case 45:
						if ((0x200000002000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 44;
						}
						break;
					case 46:
						if ((0x2000000020L & l) != 0L) {
							jjCheckNAdd(47);
						}
						break;
					case 48:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 49;
						}
						break;
					case 50:
						if ((0x200000002L & l) != 0L && kind > 17) {
							kind = 17;
						}
						break;
					case 51:
						if ((0x20000000200L & l) != 0L) {
							jjCheckNAdd(48);
						}
						break;
					case 52:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 46;
						}
						break;
					case 53:
						if ((0x200000002000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 52;
						}
						break;
					case 54:
						if ((0x800000008L & l) != 0L) {
							jjAddStates(37, 38);
						}
						break;
					case 55:
						if ((0x8000000080000L & l) == 0L) {
							break;
						}
						if (kind > 17) {
							kind = 17;
						}
						jjCheckNAdd(35);
						break;
					case 56:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 55;
						}
						break;
					case 57:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 56;
						}
						break;
					case 58:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 57;
						}
						break;
					case 59:
						if ((0x8000000080000L & l) != 0L) {
							jjCheckNAdd(47);
						}
						break;
					case 60:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 59;
						}
						break;
					case 61:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 60;
						}
						break;
					case 62:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 61;
						}
						break;
					case 63:
						if ((0x1000000010L & l) != 0L) {
							jjAddStates(35, 36);
						}
						break;
					case 64:
						if ((0x80000000800000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 65;
						}
						break;
					case 66:
						if ((0x2000000020L & l) != 0L && kind > 15) {
							kind = 15;
						}
						break;
					case 67:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 66;
						}
						break;
					case 68:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 67;
						}
						break;
					case 69:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 68;
						}
						break;
					case 70:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 64;
						}
						break;
					case 71:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 70;
						}
						break;
					case 72:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 71;
						}
						break;
					case 73:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 72;
						}
						break;
					case 74:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 73;
						}
						break;
					case 75:
						if ((0x20000000200L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 74;
						}
						break;
					case 76:
						if ((0x80000000800000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 77;
						}
						break;
					case 78:
						if ((0x100000001000L & l) != 0L && kind > 16) {
							kind = 16;
						}
						break;
					case 79:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 78;
						}
						break;
					case 80:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 79;
						}
						break;
					case 81:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 76;
						}
						break;
					case 82:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 81;
						}
						break;
					case 83:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 82;
						}
						break;
					case 84:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 83;
						}
						break;
					case 85:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 84;
						}
						break;
					case 86:
						if ((0x20000000200L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 85;
						}
						break;
					case 87:
						if ((0x20000000200L & l) != 0L) {
							jjCheckNAddStates(32, 34);
						}
						break;
					case 88:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 89;
						}
						break;
					case 90:
						if ((0x4000000040L & l) != 0L) {
							jjCheckNAdd(11);
						}
						break;
					case 91:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 90;
						}
						break;
					case 92:
						if ((0x8000000080000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 93;
						}
						break;
					case 94:
						if ((0x200000002L & l) != 0L) {
							jjAddStates(28, 31);
						}
						break;
					case 95:
						if ((0x80000000800000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 96;
						}
						break;
					case 97:
						if ((0x100000001000L & l) != 0L && kind > 15) {
							kind = 15;
						}
						break;
					case 98:
					case 105:
						if ((0x100000001000L & l) != 0L) {
							jjCheckNAdd(97);
						}
						break;
					case 99:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 98;
						}
						break;
					case 100:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 95;
						}
						break;
					case 101:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 100;
						}
						break;
					case 103:
						if ((0x10000000100000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 104;
						}
						break;
					case 106:
						if ((0x200000002L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 105;
						}
						break;
					case 107:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 103;
						}
						break;
					case 108:
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 107;
						}
						break;
					case 109:
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 108;
						}
						break;
					case 110:
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 109;
						}
						break;
					case 111:
						if ((0x80000000800000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 112;
						}
						break;
					case 113:
						if ((0x2000000020L & l) != 0L && kind > 16) {
							kind = 16;
						}
						break;
					case 114:
					case 122:
						if ((0x400000004000L & l) != 0L) {
							jjCheckNAdd(113);
						}
						break;
					case 115:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 114;
						}
						break;
					case 116:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 115;
						}
						break;
					case 117:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 111;
						}
						break;
					case 118:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 117;
						}
						break;
					case 119:
						if ((0x100000001000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 118;
						}
						break;
					case 120:
						if ((0x10000000100000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 121;
						}
						break;
					case 123:
						if ((0x800000008000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 122;
						}
						break;
					case 124:
						if ((0x400000004000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 123;
						}
						break;
					case 125:
						if ((0x1000000010000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 120;
						}
						break;
					case 126:
						if ((0x2000000020L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 125;
						}
						break;
					case 127:
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 126;
						}
						break;
					case 128:
						if ((0x800000008L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 127;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				final int i2 = (curChar & 0xff) >> 6;
				final long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 129 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (final java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 7);
		case 41:
			return jjStopAtPos(0, 8);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa1_0(0x200L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa1_0(0x5800L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa1_0(0x400L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa1_0(0x2000L);
		default:
			return jjMoveNfa_0(9, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(final long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (final java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x800L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x200L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x7000L);
		case 82:
		case 114:
			if ((active0 & 0x400L) != 0L) {
				return jjStartNfaWithStates_0(1, 10, 129);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private final int jjMoveStringLiteralDfa2_0(final long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(0, old0);
		}
		try {
			curChar = input_stream.readChar();
		} catch (final java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 68:
		case 100:
			if ((active0 & 0x200L) != 0L) {
				return jjStartNfaWithStates_0(2, 9, 129);
			}
			break;
		case 78:
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x800L);
		case 82:
		case 114:
			if ((active0 & 0x1000L) != 0L) {
				return jjStartNfaWithStates_0(2, 12, 129);
			} else if ((active0 & 0x2000L) != 0L) {
				return jjStartNfaWithStates_0(2, 13, 129);
			}
			break;
		case 84:
		case 116:
			if ((active0 & 0x4000L) != 0L) {
				return jjStartNfaWithStates_0(2, 14, 130);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private final int jjMoveStringLiteralDfa3_0(final long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(1, old0);
		}
		try {
			curChar = input_stream.readChar();
		} catch (final java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 68:
		case 100:
			if ((active0 & 0x800L) != 0L) {
				return jjStartNfaWithStates_0(3, 11, 129);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private final int jjStartNfa_0(final int pos, final long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private final int jjStartNfaWithStates_0(final int pos, final int kind, final int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (final java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjStopAtPos(final int pos, final int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStopStringLiteralDfa_0(final int pos, final long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x2400L) != 0L) {
				jjmatchedKind = 19;
				return 129;
			}
			if ((active0 & 0x200L) != 0L) {
				jjmatchedKind = 19;
				return 102;
			}
			if ((active0 & 0x5800L) != 0L) {
				jjmatchedKind = 19;
				return 28;
			}
			return -1;
		case 1:
			if ((active0 & 0x400L) != 0L) {
				return 129;
			}
			if ((active0 & 0x5000L) != 0L) {
				jjmatchedKind = 19;
				jjmatchedPos = 1;
				return 22;
			}
			if ((active0 & 0x2a00L) != 0L) {
				jjmatchedKind = 19;
				jjmatchedPos = 1;
				return 129;
			}
			return -1;
		case 2:
			if ((active0 & 0x3200L) != 0L) {
				return 129;
			}
			if ((active0 & 0x4000L) != 0L) {
				return 130;
			}
			if ((active0 & 0x800L) != 0L) {
				jjmatchedKind = 19;
				jjmatchedPos = 2;
				return 129;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 129; i-- > 0;) {
			jjrounds[i] = 0x80000000;
		}
	}

}
